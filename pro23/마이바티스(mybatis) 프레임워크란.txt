기존의 JDBC의 문제점
문제점1) connection => PreparedStatement객체 얻기 => SQL문을 DB에 전송
	=> 조회된 결과를 ResultSet으로 반환 => 자원해제 close()과정으로 작업함
문제점2) SQL 구문(select, insert, update, delete) 등이 자바코드와 섞여 있어
	자바코드의 가독성을 떨어뜨린다.(코드가 복잡해서 사용 및 유지보수가 어려워짐)



(MyBatis)마이바티스 프레임워크란?

 - SQL문의 실행결과를 자바의 VO객체 또는 Map객체에 매핑해 주는 퍼시스턴스 프레임워크이다. (ORM 프레임워크의 종류)
 - SQL문을 DAO자바파일이 아닌 XML파일에 따로 분리해서 관리해줄 수 있는 특징이 있다.
 - 데이터소스(커넥션풀)기능과 트랜잭션 처리 기능을 제공해주는 프레임워크이다.
 - 요약 : select문장을 xml파일에 작성해놓고 DAO.java파일에서 xml파일에 작성한 select문장을 불러와 
	사용할 수 있게 해주는 프레임워크가? 마이바티스 프레임워크이다.


마이바티스 프레임워크 설치(설명: 구글에서 '마이바티스 한글' 검색 또는 https://mybatis.org/mybatis-3/ko/index.html)
1. http://www.mybatis.org에 접속한 후 Products탭 클릭(https://blog.mybatis.org/p/products.html)
2. 다운로드 받은 mybatis.jar파일을 프로젝트에 복사


마이바티스 프레임워크를 이용하여 회원기능 실습하기
* 마이바티스 관련 설정 파일
	설정파일					기능
	
	SqlMapConfig.xml		데이터베이스 연동시 반환되는 값을 저장할 VO, 커넥션풀(DataSource) 등
							마이바티스 관련 정보를 설정합니다.
	
	member.xml				회원기능 관련한 insert, select, delete, update 쿼리구문을 작성해 놓는 파일


1. 마이바티스(mybatis) 프레임워크를 이용하여 회원정보 CRUD(Create, Read, Update, Delete)실습
* 마이바티스의 SqlSession클래스에서 제공하는 CRUD를 실행할 때 가장 많이 사용되는 메소드들
	메소드								기능
	
	List selectList(query_id)			id속성값에 대한 select문을 실행한 후 여러 레코드를 List로 반환합니다.

	List selectList(query_id, 조건값)		id속성값에 대한 select문을 실행하면서 사용되는 조건값도 전달하여 검색해 옵니다.
										
	T	selectOne(query_id, 조건값)		id속성값에 대한 select문을 실행하면서 사용되는 조건값도 전달하여 
										하나의 레코드를 검색해 옵니다.
										
	Map<K,V> selectMap(query_id, 조건값)	id속성값에 대한 select문을 실행하면서 사용되는 조건값도 전달합니다.
										Map타입으로 검색한 레코드들을 반환합니다.
										
	int	insert(query_id, Object obj)	id속성값에 대한 insert문을 실행하면서, obj객체의 값을 테이블에 추가합니다.
	
	int	update(query_id, Object obj)	obj객체의 값을 조건문의 수정값으로 사용해, id속성값에 대한 update문을 실행합니다.
	
	int	delete(query_id, Object obj)	obj객체의 값을 조건문의 조건값으로 사용해, id속성값에 대한 delete문을 실행합니다.
	
	
2. 회원의 ID와 비밀번호 조회
	-> 테이블의 회원정보 중 문자열이나 정수와 같은 기본형 데이터를 조회해보자.
	
	요청 : http://localhost:8080/mem2.do로 서블릿을 요청
		  서블릿에서 selectName()메소드로 조회한 경우	-> 아이디에 해당하는 회원이름을 알림창으로 출력
		  서블릿에서 selectPwd()메소드로 조회한 경우	-> 아이디에 해당하는 비밀번호를 알림창으로 출력
		  
		  
3. 모든 회원정보를 조회해서 조회한 정보를 key-value형태로 HashMap공간에 담아 반환하자.

4. 조건값으로 회원정보 조회
 - 검색창에서 검색 조건을 입력한 후 member.xml의 SQL문에 전달하여 조건에 대한 회원정보를 조회하는 예제.
 	[그림]					
 			입력 : ____________	|	<select>
 								|		<option>비밀번호</option>
 					[검색버튼]		|		<option>아이디</option>
 								|	</select>
 								
5. 회원가입창에서 입력한 회원정보를 마이바티스를 이용해 DB에 등록해보자.
	memberForm.jsp(회원가입창)에서 입력한 정보를 서블릿으로 전달하여 DB에 INSERT
		
6. test03/modMember.jsp 회원정보 수정 페이지에서 수정할 정보를 입력하고
	ID가 admin인 회원정보를 수정하기 위해 수정하기 버튼 클릭시...
	MemberServlet.class서블릿에게 수정 요청주소를 전달 하여 작업한다.
	UPDATE!!!
	
7. test03/listMembers.jsp 회원목록 페이지에서 삭제하기 링크를 클릭했을때
	삭제할 회원 id를 서블릿으로 전송해 DAO의 메소드 호출시 삭제할 id를 전달하여
	member.xml의 delete문장으로 삭제 후 다시 서블릿으로 와서 모든 회원정보 조회후
	listMembers.jsp화면에 그 결과 보여주기

--------------------------------------------------------------------------

마이바티스의 동적 SQL문 사용하기

 - 마이바티스의 동적 SQL기능이 왜 등장했는지... 그리고 어떻게 사용하는지 알아보자
 	[그림]					
 			select * from t_member		<----- [1]

 			select * from t_member
		 	where id = 'hong'			<----- [2]
 								
			select * from t_member
			where id = 'hong' and pwd= '1234'	<----- [3]
	[설명]
		이 SQL문들은 select문에 대해 각각의 조건절에 따라 각각의 SQL문을 따로 작성해야 합니다.
		그런데 이 세 개의 SQL문을 분석해 보면 조건절만 다르지 동일한 select문을 사용하고 있습니다.
		그러면 이 세 개의 SQL문을 일일이 반드는 것보다 마이바티스의 동적 SQL기능을 이용하면
		각 조건절에 대한 한 개의 SQL문으로 구현할 수 있어 더 편리합니다.
		즉, 공통 SQL문에 대해 조건값의 유무에 따라 동적으로 공통 SQL문에 조건을 추가하는 것입니다.
		이것이 바로 동적 SQL문이 등장하게 된 배경입니다.
		
		
마이바티스의 동적 SQL문을 구성하는 태그들

- if
- choose(when, otherwise)
- foreach
- trim(where, set)


마이바티스의 동적 SQL문의 특징
- sql문의 조건절에서 사용합니다.
- 조건절(where)에 조건을 동적으로 추가합니다.
- JSTL과 XML기반으로 동적SQL문을 작성합니다.


-------

		<if>태그로 동적 SQL문 만들기
		- 동적 SQL문을 작성할 때 각 조건에 대해 동적으로 SQL문에 조건식을 추가해주는 <if>태그
		- <if>태그는 <where>태그 안에서 사욛됩니다.
		- <where>태그는 <if>태그에 따라 조건식이 존재하면 공통 SQL문에 where절을 추가합니다.
			반대로 조건식이 없으면 추가하지 않습니다.
		- <if>태그는 JSTL의 <c:if>코어 태그의 사용법과 같습니다.
		
		* <if>태그 사용법
		
			<where>
				<if test='조건식'>
						조건에 만족하면 추가할 SQL문을 작성
				</if>
			</where>
				
		실습순서
		1. http://localhost:8080/pro23/test03/searchMember.jsp(회원검색 화면)에서..
			이름과 이메일로 조회하기 요청을 서블릿으로 합니다.
			이름과 이메일을 동시에 만족하는 회원정보를 조회해서 화면에 출력해줍니다.
			
			[그림]					
		
				회원 검색
		
				이름 :  [	홍길동     	]	<----- 입력받기
			 	이메일 : [	hong@test.com	]	<----- 입력받기
			 	
			 		[검색버튼]
			 	
			 => SQL문을 작성해보면
			 	select * from t_member
			 	where name = '홍길동' and email = 'hong@test.com'
			 	
		2. http://localhost:8080/pro23/test03/searchMember.jsp(회원검색 화면)에서..
			이름만 입력하여 조회하기 요청을 서블릿으로 합니다.
			
			[그림]					
		
				회원 검색
		
				이름 :  [	홍길동	]	<----- 입력받기
			 	이메일 : [			]		
			 	
			 		[검색버튼]
			 	
			 => SQL문을 작성해보면
			 	select * from t_member
			 	where name = '홍길동'
			 	
		3. http://localhost:8080/pro23/test03/searchMember.jsp(회원검색 화면)에서..
			이메일만 입력하여 조회하기 요청을 서블릿으로 합니다.
			
			[그림]					
		
				회원 검색
		
				이름 :  [				]
			 	이메일 : [hong@test.com]	<----- 입력받기
			 	
			 		[검색버튼]
			 	
			 => SQL문을 작성해보면
			 	select * from t_member
			 	where email = 'hong@test.com'


-------	 	
	 	
		<choose>태그로 동적 SQL문 만들기
		- <choose>태그는 SQL문에서 자바의 switch문과 같은 기능을 구현한다고 생각하면 됩니다.
			이때 <otherwise>태그는 생략 할 수 있습니다.
	
		* <choose>태그 사용법
		
		   <choose>
		      <when test="조건식1"> 조건식1에 만족하면 추가할 SQL문장 </when>
		      <when test="조건식2"> 조건식2에 만족하면 추가할 SQL문장 </when>
		      <when test="조건식3"> 조건식3에 만족하면 추가할 SQL문장 </when>
		      <otherwise> 조건식1, 조건식2, 조건식3에 만족하지 않으면 추가될 SQL문장 </otherwise>
		   </choose>
		   
-------		   
		
		<foreach>태그로 회원정보 조회하기
		- <foreach>를 이용하면 SQL문에서 한번에 여러개의 데이터를 처리할 수 있습니다.
	
		* <foreach>태그 사용법
		
		   <foreach item="반복문이 실행될 때마다 collection속성에 지정된 배열의 각 인덱스 위치에 저장된 값을 차례대로 사용" 
		   			collection="배열" 
		   			index="foreach반복문이 반복 실행될때마다 1씩 증가시키면서 접근하는 값의 위치를 나타낸다, 최초위치 0" 
		   			open="해당 구문이 시작될 때의 지정한 시작 기호를 추가함" 
		   			close="해당 구문이 끝날 때의 지정한 끝 기호를 추가함" 
		   			separator="한 번 이상 반복될때 반복되는 사이에 지정한 기호를 추가함" >
				
				#{item}
		   
		   </foreach>
				
		실습순서
		1. http://localhost:8080/pro23/mem4.do?atcion=foreachSelect로  
			이름이 홍길동, 이순신 , 차범근 인 사람을 모두 검색 요청!

		2. select * from t_member
			where name in('홍길동','이순신','차범근')

-------		   
		
		<foreach>태그로 여러명의 회원정보를 한꺼번에 insert하기
		- MySQL과 달리 오라클에서는 insert문을 동시에 여러 개 사용하면 오류가 발생한다.
			따라서 오라클에서는 <foreach>태그의 open속성과 close속성의 값으로 SQL문을 설정한 후
			서브쿼리 형식으로 다중 insert문을 구현한다.
			이처럼 <foreach>태그를 사용하면 여러 정보를 한꺼번에 테이블에 추가할 수 있다.
	
		* <foreach> insert 작성법
		
			[잘못된 예]
			member.xml
			
			<insert id="foreachInsert"  parameterType="java.util.Map">
			
				INSERT INTO t_member(id, pwd, name, email)
				VALUES
			
				<foreach item="item" collection="list">
				    (#{item.id},
				     #{item.pwd},
				     #{item.name},
				     #{item.email})		
				</foreach>
			
			</insert>
			
			
			[잘 작성된 예]
			member.xml
			
			<insert id="foreachInsert"  parameterType="java.util.Map">
			
				<foreach item="item" 
						collection="list"  
						open="INSERT ALL" separator=" "  
						close="SELECT * FROM DUAL" >
			
					INTO t_member(id, pwd, name, email)
					VALUES (#{item.id}, 
							#{item.pwd}, 
							#{item.name}, 
							#{item.email})

				</foreach>
			
			</insert>
			
-------	

		<sql>태그와 <include>태그로 SQL문 중복 제거하기
		- 마이바티스에서는 <sql>태그를 제공하여 member.xml에서 SQL문을 재사용할 수 있게 해줍니다.
		
		member.xml을 열어서 작성!
		
-------

		마이바티스에서 오라클 연동해 like 검색하는 방법
		
			[잘못된 예]
			member.xml
		
			<select>
			   <![CDATA[
				select * from t_member
				where name like '%'#{name}'%'  <---이렇게 작성하면 실행시 오류 발생 함
			   ]]>
			</select>


			[잘된 예]
			
			<select>
			   <![CDATA[
				select * from t_member
				where name like '%' || #{name} || '%'  <--- #{name}앞에는 '%' ||를 붙입니다. 
															그리고 뒤에는 || '%'를 붙입니다.
			   ]]>
			</select>


-----------------------------------------------------------------------------------------
마이바티스 참고 문서 
https://mybatis.org/mybatis-3/ko/index.html




		      